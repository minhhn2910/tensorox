include ../config.mk
INCLUDES  := -I../../common/inc

CFLAGS		:= 
LFLAGS		:= -lParrot
HEADERS     := src
INCLUDE 	:= -I${ANALOG_INC} -I${FANN_INC} -I${HEADERS} -I/usr/local/cuda/include
LIB			:= -L${ANALOG_LIB} -L${FANN_LIB} -L$(PARROT_LIB) -L/usr/local/cuda/lib
MODULE		:= jmeint_nn.out 
LIB_CUDA	:= -lcuda -lcudart
#DEBUG       := -g -G -O0
################################################################################

# Target rules
all: DIR build

DIR:
	@echo ${CPP_FILES}
	@echo ${OBJ_FILES}
	if [ ! -d "./bin" ];then 	\
		mkdir bin;				\
	fi
	if [ ! -d "./obj" ];then 	\
		mkdir obj;				\
	fi


build: $(MODULE)

./obj/jmeint_nn.o:./src.nn/main_nn.cu
	#python $(PLANG) -c $(PARROT_JSON) -a observe -e "nvcc $(CFLAGS) $(INCLUDE) -I$(NVIDIA_HELPER) $(INCLUDES) $(ALL_CCFLAGS) -gencode arch=compute_20,code=compute_20 $(LIB_CUDA) -I$(PARROT_LIB) -c" -s "$<" -o "$@" -t
	nvcc -O3 $(CFLAGS) $(INCLUDE) -I$(NVIDIA_HELPER) $(INCLUDES) $(ALL_CCFLAGS) -gencode arch=compute_20,code=compute_20 $(LIB_CUDA) -I$(PARROT_LIB) -c $< -o $@

$(MODULE): ./obj/jmeint_nn.o
	nvcc -O3 $(INCLUDE) $(LIB) -o ./bin/$@ $+

clean:
	rm -f ./bin/$(MODULE)
	rm -f ./obj/jmeint_nn.o

clobber: clean
